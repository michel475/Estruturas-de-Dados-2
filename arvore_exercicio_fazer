#include <stdio.h>
#include <stdlib.h>
#define MAX 100


typedef struct arv{
	int dado;
	struct arv *esq; //Receberá o indice do filho a esquerda
	struct arv *dir; //Receberá o indice do filho a direita
} *Arv;

typedef struct no{
	Arv B;
	struct no *prox;
}No;

typedef struct raiz{
	int quantidade;
	Arv *raiz;
};

typedef struct fila{
	No *inicio;
	No *fim;
	int qtd;		
}Fila;

void enfileirar(Arv A, Fila *F)
{
	//insere o nó A na fila
	if(F == NULL)
		return;
	No *no = (No*)malloc(sizeof(No));
	if(no==NULL)
		return;
	no->B = A;
	no->prox = NULL;
	F->fim->prox = no;
	F->fim = no;
}

Arv desenfileira(Fila *F)
{
	if(F == NULL)
		return 0;
	No *aux = F->inicio;
	F->inicio = F->inicio->prox;
	
	return aux->B;
	//vai retornar o nó que será desenfileirado
}

Arv insereArv(Arv e, int n, Arv d)
{
	Arv g;
	g->esq = e;
	g->dado = n;
	g->dir = d;
	
	return g;
}

void emordem(Arv A)
{
	if(A == NULL)
		return;
	emordem(A->esq);
	printf(" %d", A->dado);
	emordem(A->dir);
}

Fila* fila()
{
	Fila *F = (Fila*)malloc(sizeof(Fila));
	if(F != NULL)
	{
		F->inicio = F->fim = NULL;
		F->qtd = 0;
	}
	
	return F;
}

int vaziaf(Fila *F)
{
	if(F->inicio == NULL)
		return 1;
	else{
		return 0;
	}
}

void percursoLargura(Arv A){
    if (A == NULL)
        return;
    Fila *F = fila();
    enfileirar(A, F);
    while (!vaziaf(F) ) {
        Arv A = desenfileira (F);
        printf ("%i", A->dado);
        if (A->esq != NULL)
            enfileirar(A->esq, F);
        if (A->dir != NULL)
            enfileirar(A->dir, F);
    }
}

void preordem(Arv A)
{
	if(A == NULL)
		return;
	printf(" %d", A->dado);
	preordem(A->esq);
	preordem(A->dir);
}

void posordem(Arv A)
{
	if(A == NULL)
		return;
	preordem(A->esq);
	preordem(A->dir);
	printf(" %d", A->dado);
}


void destroiArvore(Arv A)
{
	if(A == NULL)
		return;
	destroiArvore(&(*A->esq));
	destroiArvore(&(*A->dir));
	free(A);
	A = NULL;
}

int main()
{
	Arv R = insereArv(insereArv(insereArv(NULL, 4, NULL), 2, insereArv(NULL, 5, NULL)), 1, insereArv(NULL, 3, insereArv(NULL, 6, NULL)));
    printf("Percurso Em Ordem:\n");
    emordem (R);
    printf("\nPercurso Pre Ordem:\n");
    preordem (R);
    printf("\nPercurso Pos Ordem:\n");
    posordem (R);
    
    printf("\nDestruindo a arvore!\n");
    destroiArvore (R);
    emordem (R);
    return 0;	
}
